name: Resuable workflow for triggering tests with a pull-request comment

on:
  workflow_call:
    inputs:
      runs-on:
        description: The type of machine to run job on
        required: false
        type: string
        default: ubuntu-latest
      keyword:
        description: The keyword to appear after /run in PR comment to trigger workflow
        required: true
        type: string
      description:
        description: A description of test to use in comment generated to indicate result
        required: true
        type: string
      commands:
        description: The shell command(s) to run to execute test
        required: true
        type: string
      timeout-minutes:
        description: The timeout in minutes to halt job after
        required: false
        type: number
        default: 360

jobs:
  run_test_on_keyword_and_reply_with_result:
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    if: github.event.issue.pull_request && github.event.comment.body == format('/run {0}', inputs.keyword)
    steps:
    - name: Check permissions of commenting user
      id: has_permissions
      uses: actions/github-script@v4
      with:
        script: |
          const response = await github.repos.getCollaboratorPermissionLevel({
            owner: context.repo.owner,
            repo: context.repo.repo,  
            username: context.payload.comment.user.login,
          });
          const permission_level = response.data.permission;
          return (permission_level == 'admin') || (permission_level == 'write')
    - name: Exit if insufficient permissions
      if: ${{ steps.has_permissions.outputs.result == 'false' }}
      run: |
        exit 1
    - name: React to comment
      uses: actions/github-script@v4
      with:
        script: |
          github.reactions.createForIssueComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            comment_id: context.payload.comment.id,
            content: "rocket",
          });
    - name: Get pull-request SHA
      id: sha
      uses: actions/github-script@v4
      with:
        result-encoding: string
        script: |
          const { data: pr } = await github.pulls.get({
            owner: context.issue.owner,
            repo: context.issue.repo,
            pull_number: context.issue.number,
          });
          return pr.head.sha;
    - name: Checkout pull-request SHA
      uses: actions/checkout@v2
      with:
        lfs: true
        ref: ${{ steps.sha.outputs.result }}
    - name: Run test command(s)
      run: ${{ inputs.commands }}
    - name: Create comment with test result and link to workflow run information
      if: always() && steps.has_permissions.outputs.result == 'true'
      uses: actions/github-script@v4
      with:
        script: |
          // There can be a delay between steps completing and this being reflected
          // in information queried from REST API, therefore we poll for the list of
          // jobs associated with workflow run at interval of 1 second until the
          // status of the previous "Run test command(s)" step indicates completed or
          // a maximum number of attempts have been reached
          const maximum_attempts = 5;
          let got_completed_step_info = false;
          let attempts = 0;
          let job, step;
          while (!got_completed_step_info & attempts < maximum_attempts) {
            await new Promise(r => setTimeout(r, 1000));  // Wait for 1 second
            const { data: run_jobs } = await github.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            const in_progress_jobs = run_jobs.jobs.filter(
              job => job.status == "in_progress"
            );  
            // There should only be only one job in progress
            if (in_progress_jobs.length > 1) {
              throw "Multiple jobs triggered by same keyword";
            }
            job = in_progress_jobs[0];
            const run_test_commands_steps = job.steps.filter(
              step => step.name == "Run test command(s)"
            );
            // There should only be one step with name "Run test command(s)"
            if (run_test_commands_steps.length > 1) {
              throw "Multiple steps with name 'Run test command(s)'";
            }
            step = run_test_commands_steps[0];
            got_completed_step_info = (step.status == "completed");
            attempts += 1;
          }
          if (!got_completed_step_info) {
            throw `Could not get completed step data in ${maximum_attempts} attempts`;
          }
          const result = step.conclusion == 'success' ? 'succeeded ‚úÖ' : 'failed ‚ùå';
          const started_date = new Date(step.started_at);
          const completed_date = new Date(step.completed_at);
          const time_minutes = ((completed_date - started_date) / 60000).toPrecision(3);
          const details = [
            `üÜî [${job.id}](${job.html_url})`,
            `‚è≤Ô∏è ${time_minutes} minutes`,
            `#Ô∏è‚É£ ${{ steps.sha.outputs.result }}`
          ].join('\n');
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,  
            body: `## ${{inputs.description }} ${result}\n${details}`,
          });
